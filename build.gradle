import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.Platform
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
    ext.dokka_version = libs.versions.dokka.get()
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    alias(libs.plugins.dokka)
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.ksp)
    alias(libs.plugins.versions)
}

group = 'it.scoppelletti.spaceship'
version = '1.1.0'
description 'Spaceship Gradle Plugins'
archivesBaseName = 'spaceship-gradle'

// Simulate Spaceship extension
def developerName = 'Dario Scoppelletti'
def developerEmail = 'dario@scoppelletti.it'
def developerUrl = 'http://www.scoppelletti.it'
def copyrightYear = '2019-2023'
def licenseName = 'The Apache License, Version 2.0'
def licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

gradlePlugin {
    plugins {
        spaceshipJavaLibrary {
            id = 'it.scoppelletti.spaceship.java-library'
            implementationClass = 'it.scoppelletti.spaceship.gradle.java.LibraryPlugin'
        }
    }
}

kotlin {
    explicitApi()
    jvmToolchain(11)
}

configurations {
    bom
    api.extendsFrom(bom)
    ksp.extendsFrom(bom)
    implementation.extendsFrom(bom)
    testImplementation.extendsFrom(bom)
}

dependencies {
    bom platform(libs.bom.kotlin)
    bom platform(libs.bom.spaceship)
    api gradleApi()
    api 'org.freemarker:freemarker'
    api "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    implementation 'io.github.microutils:kotlin-logging'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.squareup.moshi:moshi'
    ksp 'com.squareup.moshi:moshi-kotlin-codegen'
    testImplementation gradleTestKit()
    testImplementation 'io.kotest:kotest-assertions-core'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

test {
    useJUnitPlatform()
}

dokkaHtml {
    configure {
        outputDirectory.set(project.file('build/dokka'))
        moduleName.set(project.name)
        moduleVersion.set(project.version)
        suppressObviousFunctions.set(false)
        suppressInheritedMembers.set(true)
        offlineMode.set(true)
        dokkaSourceSets {
            named('main') {
                documentedVisibilities.set([
                        DokkaConfiguration.Visibility.PUBLIC,
                        DokkaConfiguration.Visibility.PROTECTED])
                skipDeprecated.set(false)
                reportUndocumented.set(false)
                skipEmptyPackages.set(true)
                platform.set(Platform.jvm)
                noJdkLink.set(true)
                noAndroidSdkLink.set(true)
                suppressGeneratedFiles.set(true)
                includes.from('README.md')
            }
        }
        pluginsMapConfiguration.set([
                "org.jetbrains.dokka.base.DokkaBase": """{
"footerMessage" : "Copyright(C) ${copyrightYear} <a href='${developerUrl}'>${developerName}</a>",
"customStyleSheets" : [ "${project.file('etc/logo-styles.css')}" ]
}"""
        ])
    }
}

tasks.register('copyLicense', Copy) {
    description = 'Copies the license file'
    group = BasePlugin.BUILD_GROUP
    from project.rootDir
    into project.file('build/metainf')
    include 'LICENSE'
    rename('LICENSE', 'LICENSE.txt')
}

tasks.register('generateNotice') {
    dependsOn('copyLicense')
    description = 'Creates the notice file'
    group = BasePlugin.BUILD_GROUP
    doLast {
        def file = project.file('build/metainf/NOTICE.txt')
        file.write "${project.description}\n"
        file.append "Copyright(C) ${copyrightYear} ${developerName}, ${developerUrl}\n"
    }
}

jar {
    dependsOn('generateNotice')
    metaInf { spec -> spec.from(project.file('build/metainf')) }
}

tasks.register('generateSourcesPackage', Jar) {
    dependsOn('generateNotice')
    description = 'Generates the sources package'
    group = PublishingPlugin.PUBLISH_TASK_GROUP
    from(project.file('src/main/kotlin'))
    metaInf { spec -> spec.from(project.file('build/metainf')) }
    destinationDirectory.set(project.file('build/libs'))
    archiveBaseName.set('src')
    archiveVersion.set(project.version.toString())
    archiveClassifier.set('sources')
    archiveExtension.set('jar')
}

tasks.register("generateJavadocPackage", Jar) {
    dependsOn('dokkaHtml', 'generateNotice')
    description = 'Generates the Javadoc package'
    group = PublishingPlugin.PUBLISH_TASK_GROUP
    from(project.file('build/dokka'))
    metaInf { spec -> spec.from(project.file('build/metainf')) }
    destinationDirectory.set(project.file('build/libs'))
    archiveBaseName.set('javadoc')
    archiveVersion.set(project.version.toString())
    archiveClassifier.set('javadoc')
    archiveExtension.set('jar')
}

publishing {
    publications {
        // publishLibraryPublicationToDevRepository
        library(MavenPublication) {
            from components.java
            artifact generateSourcesPackage
            artifact generateJavadocPackage

            artifactId = archivesBaseName

            pom {
                name = rootProject.name
                description = project.description
                url = 'http://github.com/dscoppelletti/spaceship-gradle'
                inceptionYear = copyrightYear
                developers {
                    developer {
                        name = developerName
                        email = developerEmail
                        url = developerUrl
                    }
                }
                licenses {
                    license {
                        name = licenseName
                        url = licenseUrl
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:dscoppelletti/spaceship-gradle.git'
                    developerConnection = 'scm:git:git@github.com:dscoppelletti/spaceship-gradle.git'
                    url = 'git@github.com:dscoppelletti/spaceship-gradle.git'
                }
            }
        }
    }

    if (project.hasProperty('it.scoppelletti.spaceship.repository.url')) {
        repositories {
            maven {
                name = 'dev'
                url = project.property('it.scoppelletti.spaceship.repository.url')
            }
        }
    }
}
